{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass PostService {\n  constructor(http) {\n    this.http = http;\n    this.posts = [];\n    this.postUpdated = new Subject();\n  }\n  getPostUpdateListener() {\n    return this.postUpdated.asObservable();\n  }\n  getPost() {\n    // return this.posts;  //by reference\n    // return [...this.posts];  //copy of the list of post\n    this.http.get('http://localhost:3000/api/posts').pipe(map(postData => {\n      return postData.data.map(payLoad => {\n        return {\n          title: payLoad.title,\n          content: payLoad.content,\n          id: payLoad._id\n        };\n      });\n    })).subscribe(transformedData => {\n      this.posts = transformedData;\n      this.postUpdated.next([...this.posts]);\n    });\n  }\n  addPost(title, content) {\n    const post = {\n      id: '',\n      title: title,\n      content: content\n    };\n    this.http.post('http://localhost:3000/api/posts', post).subscribe(res => {\n      const postId = res.postId;\n      post.id = postId;\n      this.posts.push(post);\n      this.postUpdated.next([...this.posts]);\n    });\n  }\n  deletePost(postId) {\n    this.http.delete('http://localhost:3000/api/posts/' + postId).subscribe(() => {\n      this.posts = this.posts.filter(post => post.id != postId);\n      this.postUpdated.next([...this.posts]);\n    });\n  }\n  static {\n    this.ɵfac = function PostService_Factory(t) {\n      return new (t || PostService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PostService,\n      factory: PostService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { PostService };","map":{"version":3,"names":["Subject","map","PostService","constructor","http","posts","postUpdated","getPostUpdateListener","asObservable","getPost","get","pipe","postData","data","payLoad","title","content","id","_id","subscribe","transformedData","next","addPost","post","res","postId","push","deletePost","delete","filter","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\keral\\Desktop\\assignment1\\ng-front\\src\\app\\post\\post.service.ts"],"sourcesContent":["import {Post} from \"./post.model\"\r\nimport {Injectable} from \"@angular/core\";\r\nimport {Subject} from \"rxjs\";\r\nimport {map} from \"rxjs/operators\"\r\nimport {HttpClient} from \"@angular/common/http\";\r\n\r\n@Injectable({providedIn: 'root'})\r\n  export class PostService {\r\n  private posts: Post[] = [];\r\n  private postUpdated = new Subject<Post[]>();\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n\r\n  getPostUpdateListener() {\r\n    return this.postUpdated.asObservable();\r\n  }\r\n\r\n  getPost() {\r\n    // return this.posts;  //by reference\r\n    // return [...this.posts];  //copy of the list of post\r\n    this.http.get<{ success: boolean, data: any }>('http://localhost:3000/api/posts')\r\n      .pipe(map(postData => {\r\n        return postData.data.map((payLoad: any) => {\r\n          return {\r\n            title: payLoad.title,\r\n            content: payLoad.content,\r\n            id: payLoad._id\r\n          };\r\n        });\r\n      }))\r\n      .subscribe((transformedData) => {\r\n        this.posts = transformedData;\r\n        this.postUpdated.next([...this.posts]);\r\n      });\r\n  }\r\n\r\n  addPost(title: string, content: string) {\r\n    const post: Post = {id: '', title: title, content: content}\r\n\r\n    this.http.post<{ success: boolean, postId: string }>('http://localhost:3000/api/posts', post)\r\n      .subscribe((res) => {\r\n        const postId = res.postId;\r\n        post.id = postId;\r\n        this.posts.push(post);\r\n        this.postUpdated.next([...this.posts]);\r\n      });\r\n  }\r\n\r\n  deletePost(postId: string) {\r\n    this.http.delete('http://localhost:3000/api/posts/' + postId)\r\n      .subscribe(() => {\r\n        this.posts = this.posts.filter(post => post.id != postId);\r\n        this.postUpdated.next([...this.posts]);\r\n      });\r\n  }\r\n\r\n}\r\n"],"mappings":"AAEA,SAAQA,OAAO,QAAO,MAAM;AAC5B,SAAQC,GAAG,QAAO,gBAAgB;;;AAGlC,MACeC,WAAW;EAIxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,WAAW,GAAG,IAAIN,OAAO,EAAU;EAG3C;EAGAO,qBAAqBA,CAAA;IACnB,OAAO,IAAI,CAACD,WAAW,CAACE,YAAY,EAAE;EACxC;EAEAC,OAAOA,CAAA;IACL;IACA;IACA,IAAI,CAACL,IAAI,CAACM,GAAG,CAAkC,iCAAiC,CAAC,CAC9EC,IAAI,CAACV,GAAG,CAACW,QAAQ,IAAG;MACnB,OAAOA,QAAQ,CAACC,IAAI,CAACZ,GAAG,CAAEa,OAAY,IAAI;QACxC,OAAO;UACLC,KAAK,EAAED,OAAO,CAACC,KAAK;UACpBC,OAAO,EAAEF,OAAO,CAACE,OAAO;UACxBC,EAAE,EAAEH,OAAO,CAACI;SACb;MACH,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC,CACFC,SAAS,CAAEC,eAAe,IAAI;MAC7B,IAAI,CAACf,KAAK,GAAGe,eAAe;MAC5B,IAAI,CAACd,WAAW,CAACe,IAAI,CAAC,CAAC,GAAG,IAAI,CAAChB,KAAK,CAAC,CAAC;IACxC,CAAC,CAAC;EACN;EAEAiB,OAAOA,CAACP,KAAa,EAAEC,OAAe;IACpC,MAAMO,IAAI,GAAS;MAACN,EAAE,EAAE,EAAE;MAAEF,KAAK,EAAEA,KAAK;MAAEC,OAAO,EAAEA;IAAO,CAAC;IAE3D,IAAI,CAACZ,IAAI,CAACmB,IAAI,CAAuC,iCAAiC,EAAEA,IAAI,CAAC,CAC1FJ,SAAS,CAAEK,GAAG,IAAI;MACjB,MAAMC,MAAM,GAAGD,GAAG,CAACC,MAAM;MACzBF,IAAI,CAACN,EAAE,GAAGQ,MAAM;MAChB,IAAI,CAACpB,KAAK,CAACqB,IAAI,CAACH,IAAI,CAAC;MACrB,IAAI,CAACjB,WAAW,CAACe,IAAI,CAAC,CAAC,GAAG,IAAI,CAAChB,KAAK,CAAC,CAAC;IACxC,CAAC,CAAC;EACN;EAEAsB,UAAUA,CAACF,MAAc;IACvB,IAAI,CAACrB,IAAI,CAACwB,MAAM,CAAC,kCAAkC,GAAGH,MAAM,CAAC,CAC1DN,SAAS,CAAC,MAAK;MACd,IAAI,CAACd,KAAK,GAAG,IAAI,CAACA,KAAK,CAACwB,MAAM,CAACN,IAAI,IAAIA,IAAI,CAACN,EAAE,IAAIQ,MAAM,CAAC;MACzD,IAAI,CAACnB,WAAW,CAACe,IAAI,CAAC,CAAC,GAAG,IAAI,CAAChB,KAAK,CAAC,CAAC;IACxC,CAAC,CAAC;EACN;;;uBAjDaH,WAAW,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAX/B,WAAW;MAAAgC,OAAA,EAAXhC,WAAW,CAAAiC,IAAA;MAAAC,UAAA,EADD;IAAM;EAAA;;SAChBlC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}