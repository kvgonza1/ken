{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass PostService {\n  constructor(http) {\n    this.http = http;\n    this.posts = [];\n    this.postUpdated = new Subject();\n  }\n  getPost() {\n    // return this.posts;  //by reference\n    // return [...this.posts];  //copy of the list of post\n    this.http.get('http://localhost:3000/api/posts').subscribe(postData => {\n      this.posts = postData.data;\n      this.postUpdated.next([...this.posts]);\n    });\n  }\n  getPostUpdateListener() {\n    return this.postUpdated.asObservable();\n  }\n  addPost(title, content) {\n    const post = {\n      id: '',\n      title: title,\n      content: content\n    };\n    this.http.post('http://localhost:3000/api/posts', post).subscribe(res => {\n      console.log(res.data);\n      this.posts.push(post);\n      this.postUpdated.next([...this.posts]);\n    });\n  }\n  static {\n    this.ɵfac = function PostService_Factory(t) {\n      return new (t || PostService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PostService,\n      factory: PostService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { PostService };","map":{"version":3,"names":["Subject","PostService","constructor","http","posts","postUpdated","getPost","get","subscribe","postData","data","next","getPostUpdateListener","asObservable","addPost","title","content","post","id","res","console","log","push","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\keral\\Desktop\\assignment1\\ng-front\\src\\app\\post\\post.service.ts"],"sourcesContent":["import {Post} from \"./post.model\"\r\nimport {Injectable} from \"@angular/core\";\r\nimport {Subject} from \"rxjs\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class PostService {\r\n  private posts: Post[] = [];\r\n  private postUpdated = new Subject<Post[]>();\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n\r\n  getPost() {\r\n    // return this.posts;  //by reference\r\n    // return [...this.posts];  //copy of the list of post\r\n    this.http.get<{success: boolean, data: Post[]}>('http://localhost:3000/api/posts')\r\n      .subscribe( (postData)=>{\r\n        this.posts = postData.data;\r\n        this.postUpdated.next([...this.posts]);\r\n      });\r\n  }\r\n\r\n  getPostUpdateListener(){\r\n    return this.postUpdated.asObservable();\r\n  }\r\n\r\n  addPost(title: String, content: String) {\r\n    const post: Post = {id:'',title: title, content:content}\r\n\r\n    this.http.post<{data: String}>('http://localhost:3000/api/posts', post)\r\n      .subscribe((res)=>{\r\n        console.log(res.data);\r\n        this.posts.push(post);\r\n        this.postUpdated.next([...this.posts]);\r\n      });\r\n\r\n  }\r\n\r\n}\r\n"],"mappings":"AAEA,SAAQA,OAAO,QAAO,MAAM;;;AAG5B,MACaC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,WAAW,GAAG,IAAIL,OAAO,EAAU;EAG3C;EAGAM,OAAOA,CAAA;IACL;IACA;IACA,IAAI,CAACH,IAAI,CAACI,GAAG,CAAmC,iCAAiC,CAAC,CAC/EC,SAAS,CAAGC,QAAQ,IAAG;MACtB,IAAI,CAACL,KAAK,GAAGK,QAAQ,CAACC,IAAI;MAC1B,IAAI,CAACL,WAAW,CAACM,IAAI,CAAC,CAAC,GAAG,IAAI,CAACP,KAAK,CAAC,CAAC;IACxC,CAAC,CAAC;EACN;EAEAQ,qBAAqBA,CAAA;IACnB,OAAO,IAAI,CAACP,WAAW,CAACQ,YAAY,EAAE;EACxC;EAEAC,OAAOA,CAACC,KAAa,EAAEC,OAAe;IACpC,MAAMC,IAAI,GAAS;MAACC,EAAE,EAAC,EAAE;MAACH,KAAK,EAAEA,KAAK;MAAEC,OAAO,EAACA;IAAO,CAAC;IAExD,IAAI,CAACb,IAAI,CAACc,IAAI,CAAiB,iCAAiC,EAAEA,IAAI,CAAC,CACpET,SAAS,CAAEW,GAAG,IAAG;MAChBC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACT,IAAI,CAAC;MACrB,IAAI,CAACN,KAAK,CAACkB,IAAI,CAACL,IAAI,CAAC;MACrB,IAAI,CAACZ,WAAW,CAACM,IAAI,CAAC,CAAC,GAAG,IAAI,CAACP,KAAK,CAAC,CAAC;IACxC,CAAC,CAAC;EAEN;;;uBAhCWH,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXzB,WAAW;MAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;MAAAC,UAAA,EADC;IAAM;EAAA;;SAClB5B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}