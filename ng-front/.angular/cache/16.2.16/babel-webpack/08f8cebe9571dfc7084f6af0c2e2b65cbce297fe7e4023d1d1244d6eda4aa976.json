{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nclass AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.isAuthenticated = false;\n    this.authStatusListener = new Subject();\n    this.token = null;\n    this.tokenTimer = 0;\n  }\n  getToken() {\n    return this.token;\n  }\n  getIsAuth() {\n    return this.isAuthenticated;\n  }\n  getAuthStatusListener() {\n    return this.authStatusListener.asObservable();\n  }\n  createUser(email, password) {\n    const authData = {\n      email: email,\n      password: password\n    };\n    this.http.post(\"http://localhost:3000/api/user/signup\", authData).subscribe(res => {\n      console.log(res);\n    });\n  }\n  login(email, password) {\n    const authData = {\n      email: email,\n      password: password\n    };\n    this.http.post(\"http://localhost:3000/api/user/login\", authData).subscribe(response => {\n      const token = response.token;\n      if (token) {\n        const expiresInDuration = response.expiresIn;\n        this.setAuthTimer(expiresInDuration);\n        this.isAuthenticated = true;\n        this.token = token;\n        this.authStatusListener.next(true);\n        const now = new Date();\n        this.saveAuthData(token, new Date(now.getTime() + expiresInDuration * 1000));\n        this.router.navigate(['/']);\n      }\n    });\n  }\n  logout() {\n    this.token = null;\n    this.isAuthenticated = false;\n    this.authStatusListener.next(false);\n    clearTimeout(this.tokenTimer);\n    this.clearAuthData();\n    this.router.navigate(['/']);\n  }\n  autoAuthUser() {\n    const authInfo = this.getAuthData(); // returns json token and expDate\n    if (!authInfo) {\n      return;\n    }\n    const expiresIn = authInfo.expirationDate.getTime() - new Date().getTime();\n    if (expiresIn > 0) {\n      this.token = authInfo.token;\n      this.isAuthenticated = true;\n      this.setAuthTimer(expiresIn / 1000); // since AuthTime is in seconds\n      this.authStatusListener.next(true);\n    }\n  }\n  setAuthTimer(expDuration) {\n    this.tokenTimer = setTimeout(() => {\n      this.logout();\n    }, expDuration * 1000);\n  }\n  saveAuthData(token, expirationDate) {\n    localStorage.setItem('token', token);\n    localStorage.setItem('expiration', expirationDate.toISOString()); //to serialize the date object\n  }\n\n  clearAuthData() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expiration');\n  }\n  getAuthData() {\n    const token = localStorage.getItem('token');\n    const expirationDate = localStorage.getItem('expiration');\n    if (!token || !expirationDate) {\n      return;\n    }\n    return {\n      token: token,\n      expirationDate: new Date(expirationDate) // we have to turn it back into a Date type b/c it is serialized in local storage\n    };\n  }\n\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["Subject","AuthService","constructor","http","router","isAuthenticated","authStatusListener","token","tokenTimer","getToken","getIsAuth","getAuthStatusListener","asObservable","createUser","email","password","authData","post","subscribe","res","console","log","login","response","expiresInDuration","expiresIn","setAuthTimer","next","now","Date","saveAuthData","getTime","navigate","logout","clearTimeout","clearAuthData","autoAuthUser","authInfo","getAuthData","expirationDate","expDuration","setTimeout","localStorage","setItem","toISOString","removeItem","getItem","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\keral\\Desktop\\assignment1\\ng-front\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {AuthData} from \"./auth-data.model\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {Subject} from \"rxjs\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n\r\n@Injectable({providedIn: \"root\"})\r\nexport class AuthService {\r\n  private isAuthenticated: boolean = false;\r\n  private authStatusListener = new Subject<boolean>();\r\n  private token: string | null = null;\r\n  private tokenTimer: ReturnType<typeof setTimeout> = 0;\r\n\r\n  constructor(private http: HttpClient, private router: Router) {\r\n  }\r\n\r\n  getToken() {\r\n    return this.token;\r\n  }\r\n\r\n  getIsAuth() {\r\n    return this.isAuthenticated;\r\n  }\r\n\r\n  getAuthStatusListener() {\r\n    return this.authStatusListener.asObservable();\r\n  }\r\n\r\n  createUser(email: string, password: string) {\r\n    const authData: AuthData = {email: email, password: password};\r\n    this.http.post(\"http://localhost:3000/api/user/signup\", authData)\r\n      .subscribe(res => {\r\n        console.log(res);\r\n      });\r\n  }\r\n\r\n  login(email: string, password: string) {\r\n    const authData: AuthData = {email: email, password: password};\r\n\r\n    this.http.post<{ token: string, expiresIn: number }>(\"http://localhost:3000/api/user/login\", authData)\r\n      .subscribe(response => {\r\n        const token = response.token;\r\n        if (token) {\r\n          const expiresInDuration = response.expiresIn;\r\n          this.setAuthTimer(expiresInDuration);\r\n          this.isAuthenticated = true;\r\n          this.token = token;\r\n          this.authStatusListener.next(true);\r\n          const now = new Date();\r\n          this.saveAuthData(token, new Date(now.getTime() + expiresInDuration * 1000))\r\n          this.router.navigate(['/']);\r\n        }\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    this.token = null;\r\n    this.isAuthenticated = false;\r\n    this.authStatusListener.next(false);\r\n    clearTimeout(this.tokenTimer);\r\n    this.clearAuthData();\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  autoAuthUser() {\r\n    const authInfo = this.getAuthData();  // returns json token and expDate\r\n    if (!authInfo) {\r\n      return;\r\n    }\r\n    const expiresIn = authInfo.expirationDate.getTime() - new Date().getTime();\r\n    if(expiresIn > 0){\r\n      this.token = authInfo.token;\r\n      this.isAuthenticated = true;\r\n      this.setAuthTimer(expiresIn / 1000); // since AuthTime is in seconds\r\n      this.authStatusListener.next(true);\r\n    }\r\n  }\r\n\r\n  private setAuthTimer(expDuration: number) {\r\n    this.tokenTimer = setTimeout(() => {\r\n      this.logout();\r\n    }, expDuration * 1000);\r\n  }\r\n\r\n  private saveAuthData(token: string, expirationDate: Date) {\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('expiration', expirationDate.toISOString()); //to serialize the date object\r\n  }\r\n\r\n  private clearAuthData() {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('expiration');\r\n  }\r\n\r\n  private getAuthData() {\r\n    const token = localStorage.getItem('token');\r\n    const expirationDate = localStorage.getItem('expiration');\r\n\r\n    if (!token || !expirationDate) {\r\n      return;\r\n    }\r\n    return {\r\n      token: token,\r\n      expirationDate: new Date(expirationDate)  // we have to turn it back into a Date type b/c it is serialized in local storage\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAAQA,OAAO,QAAO,MAAM;;;;AAI5B,MACaC,WAAW;EAMtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAL5C,KAAAC,eAAe,GAAY,KAAK;IAChC,KAAAC,kBAAkB,GAAG,IAAIN,OAAO,EAAW;IAC3C,KAAAO,KAAK,GAAkB,IAAI;IAC3B,KAAAC,UAAU,GAAkC,CAAC;EAGrD;EAEAC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,KAAK;EACnB;EAEAG,SAASA,CAAA;IACP,OAAO,IAAI,CAACL,eAAe;EAC7B;EAEAM,qBAAqBA,CAAA;IACnB,OAAO,IAAI,CAACL,kBAAkB,CAACM,YAAY,EAAE;EAC/C;EAEAC,UAAUA,CAACC,KAAa,EAAEC,QAAgB;IACxC,MAAMC,QAAQ,GAAa;MAACF,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAEA;IAAQ,CAAC;IAC7D,IAAI,CAACZ,IAAI,CAACc,IAAI,CAAC,uCAAuC,EAAED,QAAQ,CAAC,CAC9DE,SAAS,CAACC,GAAG,IAAG;MACfC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAClB,CAAC,CAAC;EACN;EAEAG,KAAKA,CAACR,KAAa,EAAEC,QAAgB;IACnC,MAAMC,QAAQ,GAAa;MAACF,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAEA;IAAQ,CAAC;IAE7D,IAAI,CAACZ,IAAI,CAACc,IAAI,CAAuC,sCAAsC,EAAED,QAAQ,CAAC,CACnGE,SAAS,CAACK,QAAQ,IAAG;MACpB,MAAMhB,KAAK,GAAGgB,QAAQ,CAAChB,KAAK;MAC5B,IAAIA,KAAK,EAAE;QACT,MAAMiB,iBAAiB,GAAGD,QAAQ,CAACE,SAAS;QAC5C,IAAI,CAACC,YAAY,CAACF,iBAAiB,CAAC;QACpC,IAAI,CAACnB,eAAe,GAAG,IAAI;QAC3B,IAAI,CAACE,KAAK,GAAGA,KAAK;QAClB,IAAI,CAACD,kBAAkB,CAACqB,IAAI,CAAC,IAAI,CAAC;QAClC,MAAMC,GAAG,GAAG,IAAIC,IAAI,EAAE;QACtB,IAAI,CAACC,YAAY,CAACvB,KAAK,EAAE,IAAIsB,IAAI,CAACD,GAAG,CAACG,OAAO,EAAE,GAAGP,iBAAiB,GAAG,IAAI,CAAC,CAAC;QAC5E,IAAI,CAACpB,MAAM,CAAC4B,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;;IAE/B,CAAC,CAAC;EACN;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAAC1B,KAAK,GAAG,IAAI;IACjB,IAAI,CAACF,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACC,kBAAkB,CAACqB,IAAI,CAAC,KAAK,CAAC;IACnCO,YAAY,CAAC,IAAI,CAAC1B,UAAU,CAAC;IAC7B,IAAI,CAAC2B,aAAa,EAAE;IACpB,IAAI,CAAC/B,MAAM,CAAC4B,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7B;EAEAI,YAAYA,CAAA;IACV,MAAMC,QAAQ,GAAG,IAAI,CAACC,WAAW,EAAE,CAAC,CAAE;IACtC,IAAI,CAACD,QAAQ,EAAE;MACb;;IAEF,MAAMZ,SAAS,GAAGY,QAAQ,CAACE,cAAc,CAACR,OAAO,EAAE,GAAG,IAAIF,IAAI,EAAE,CAACE,OAAO,EAAE;IAC1E,IAAGN,SAAS,GAAG,CAAC,EAAC;MACf,IAAI,CAAClB,KAAK,GAAG8B,QAAQ,CAAC9B,KAAK;MAC3B,IAAI,CAACF,eAAe,GAAG,IAAI;MAC3B,IAAI,CAACqB,YAAY,CAACD,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC;MACrC,IAAI,CAACnB,kBAAkB,CAACqB,IAAI,CAAC,IAAI,CAAC;;EAEtC;EAEQD,YAAYA,CAACc,WAAmB;IACtC,IAAI,CAAChC,UAAU,GAAGiC,UAAU,CAAC,MAAK;MAChC,IAAI,CAACR,MAAM,EAAE;IACf,CAAC,EAAEO,WAAW,GAAG,IAAI,CAAC;EACxB;EAEQV,YAAYA,CAACvB,KAAa,EAAEgC,cAAoB;IACtDG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEpC,KAAK,CAAC;IACpCmC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEJ,cAAc,CAACK,WAAW,EAAE,CAAC,CAAC,CAAC;EACpE;;EAEQT,aAAaA,CAAA;IACnBO,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC;IAChCH,YAAY,CAACG,UAAU,CAAC,YAAY,CAAC;EACvC;EAEQP,WAAWA,CAAA;IACjB,MAAM/B,KAAK,GAAGmC,YAAY,CAACI,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMP,cAAc,GAAGG,YAAY,CAACI,OAAO,CAAC,YAAY,CAAC;IAEzD,IAAI,CAACvC,KAAK,IAAI,CAACgC,cAAc,EAAE;MAC7B;;IAEF,OAAO;MACLhC,KAAK,EAAEA,KAAK;MACZgC,cAAc,EAAE,IAAIV,IAAI,CAACU,cAAc,CAAC,CAAE;KAC3C;EACH;;;;uBAlGWtC,WAAW,EAAA8C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAXnD,WAAW;MAAAoD,OAAA,EAAXpD,WAAW,CAAAqD,IAAA;MAAAC,UAAA,EADC;IAAM;EAAA;;SAClBtD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}